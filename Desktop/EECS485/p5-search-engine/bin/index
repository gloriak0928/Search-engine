#!/bin/bash
# search

# Stop on errors
# See https://vaneyckt.io/posts/safer_bash_scripts_with_set_euxo_pipefail/
set -Eeuo pipefail

# Sanity check command line options
usage() {
  echo "Usage: $0 (start|stop|status|restart)"
}

if [ $# -ne 1 ]; then
  usage
  exit 1
fi

# Parse argument.  $1 is the first argument
case $1 in
  "start")
      if pgrep -f "flask --app index run --host 0.0.0.0 --port 9000" > /dev/null ||
        pgrep -f "flask --app index run --host 0.0.0.0 --port 9001" > /dev/null ||
        pgrep -f "flask --app index run --host 0.0.0.0 --port 9002" > /dev/null; then
      echo "Error: index server is already running"
      exit 1
      fi

      mkdir -p var/log
      rm -f var/log/index.log
      INDEX_PATH="inverted_index_0.txt" flask --app index run --host 0.0.0.0 --port 9000 >> var/log/index.log 2>&1 &
      INDEX_PATH="inverted_index_1.txt" flask --app index run --host 0.0.0.0 --port 9001 >> var/log/index.log 2>&1 &
      INDEX_PATH="inverted_index_2.txt" flask --app index run --host 0.0.0.0 --port 9002 >> var/log/index.log 2>&1 &
      echo "starting index server ..."
      echo "+ mkdir -p var/log"
      echo "+ rm -f var/log/index.log"
      echo "+ INDEX_PATH="inverted_index_0.txt" flask --app index run --host 0.0.0.0 --port 9000 >> var/log/index.log 2>&1 &"
      echo "+ INDEX_PATH="inverted_index_1.txt" flask --app index run --host 0.0.0.0 --port 9001 >> var/log/index.log 2>&1 &"
      echo "+ INDEX_PATH="inverted_index_2.txt" flask --app index run --host 0.0.0.0 --port 9002 >> var/log/index.log 2>&1 &"
  ;;

  "stop")
      pkill -f "flask --app index run --host 0.0.0.0 --port 9000" || true
      pkill -f "flask --app index run --host 0.0.0.0 --port 9001" || true
      pkill -f "flask --app index run --host 0.0.0.0 --port 9002" || true
      echo "stopping index server ..."
      echo "+ pkill -f "flask --app index run --host 0.0.0.0 --port 9000" || true"
      echo "+ pkill -f "flask --app index run --host 0.0.0.0 --port 9001" || true"
      echo "+ pkill -f "flask --app index run --host 0.0.0.0 --port 9002" || true"
  ;;

  "restart")
      echo "stopping index server ..."
      echo "+ pkill -f "flask --app index run --host 0.0.0.0 --port 9000" || true"
      echo "+ pkill -f "flask --app index run --host 0.0.0.0 --port 9001" || true"
      echo "+ pkill -f "flask --app index run --host 0.0.0.0 --port 9002" || true"

      # Stop the servers
      pkill -f "flask --app index run --host 0.0.0.0 --port 9000" || true
      pkill -f "flask --app index run --host 0.0.0.0 --port 9001" || true
      pkill -f "flask --app index run --host 0.0.0.0 --port 9002" || true
      
      # It's often a good idea to allow a brief moment for the servers to shut down
      sleep 2

      # Start the servers
      echo "starting index server ..."

      mkdir -p var/log
      rm -f var/log/index.log

      INDEX_PATH="inverted_index_0.txt" flask --app index run --host 0.0.0.0 --port 9000 >> var/log/index.log 2>&1 &
      INDEX_PATH="inverted_index_1.txt" flask --app index run --host 0.0.0.0 --port 9001 >> var/log/index.log 2>&1 &
      INDEX_PATH="inverted_index_2.txt" flask --app index run --host 0.0.0.0 --port 9002 >> var/log/index.log 2>&1 &

      echo "+ mkdir -p var/log"
      echo "+ rm -f var/log/index.log"
      echo "+ INDEX_PATH="inverted_index_0.txt" flask --app index run --host 0.0.0.0 --port 9000 >> var/log/index.log 2>&1 &"
      echo "+ INDEX_PATH="inverted_index_1.txt" flask --app index run --host 0.0.0.0 --port 9001 >> var/log/index.log 2>&1 &"
      echo "+ INDEX_PATH="inverted_index_2.txt" flask --app index run --host 0.0.0.0 --port 9002 >> var/log/index.log 2>&1 &"
  
      ;;

  "status")
      set +o pipefail
      NPROCS=$(pgrep -f "flask --app index run --host 0.0.0.0 --port 900[0-2]" | wc -l)
      set -o pipefail

      if [ "$NPROCS" -eq 3 ]; then
        echo "index server running"
        exit 0
      elif [ "$NPROCS" -eq 0 ]; then
        echo "index server stopped"
        exit 1
      else
        echo "index server error: found ${NPROCS} processes, expected 3"
        exit 2
      fi
      ;;
  *)
    usage
    exit 1
    ;;
esac